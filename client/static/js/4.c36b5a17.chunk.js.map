{"version":3,"sources":["queries/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js","components/AddAuthorOrBook.jsx"],"names":["getAllBooks","gql","getAllAuthors","addAnBook","addAnAuthor","deleteAnBook","_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","push","apply","_objectSpread2","target","i","arguments","length","source","forEach","getOwnPropertyDescriptors","defineProperties","AddAuthorOrBook","React","useState","bookName","genre","authorId","authorName","authorAge","formData","setFormData","bookFormRef","useRef","authorFormRef","useQuery","loading","error","data","useMutation","addAnBookFuntion","addAnAuthorFuntion","isBookPane","setIsBookPane","authorData","authors","className","ref","onSubmit","event","preventDefault","variables","name","refetchQueries","x","type","onChange","e","placeholder","required","disabled","map","author","id","onClick","current","reset","age","Number","min","max"],"mappings":"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","file":"static/js/4.c36b5a17.chunk.js","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\n\r\nexport const getAllBooks = gql`\r\n  {\r\n    books {\r\n      id\r\n      name\r\n      genre\r\n      author {\r\n        name\r\n        age\r\n        id\r\n        books {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getAllAuthors = gql`\r\n  {\r\n    authors {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const addAnBook = gql`\r\n  mutation ($name: String!, $genre: String!, $authorId: ID!) {\r\n    addAnBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n    }\r\n  }\r\n`;\r\nexport const addAnAuthor = gql`\r\n  mutation ($name: String!, $age: Int!) {\r\n    addAnAuthor(name: $name, age: $age) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\nexport const deleteAnBook = gql`\r\n  mutation ($id: ID!) {\r\n    deleteAnBook(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getBookById = gql`\r\n  query ($id: ID!) {\r\n    book(id: $id) {\r\n      name\r\n      genre\r\n      author {\r\n        name\r\n        age\r\n        book {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}","import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React, { useState } from \"react\";\r\nimport { addAnBook, addAnAuthor, getAllAuthors, getAllBooks } from \"../queries\";\r\nconst AddAuthorOrBook = () => {\r\n  const [formData, setFormData] = React.useState({\r\n    bookName: \"\",\r\n    genre: \"\",\r\n    authorId: \"\",\r\n    authorName: 0,\r\n    authorAge: \"\",\r\n  });\r\n\r\n  const bookFormRef = React.useRef(null);\r\n  const authorFormRef = React.useRef(null);\r\n\r\n  const { loading, error, data } = useQuery(getAllAuthors);\r\n  const [addAnBookFuntion, addAnBookProps] = useMutation(addAnBook);\r\n  const [addAnAuthorFuntion, addAnAuthorProps] = useMutation(addAnAuthor);\r\n  const [isBookPane, setIsBookPane] = useState(true);\r\n  if (error) return <p>Error :(</p>;\r\n  const authorData = data?.authors;\r\n  if (isBookPane) {\r\n    return (\r\n      <div className=\"add-book-zone\">\r\n        <h2>Add a Book</h2>\r\n        <form\r\n          ref={bookFormRef}\r\n          className=\"add-book-form\"\r\n          onSubmit={(event) => {\r\n            event.preventDefault();\r\n            addAnBookFuntion({\r\n              variables: {\r\n                name: formData.bookName,\r\n                genre: formData.genre,\r\n                authorId: formData.authorId,\r\n              },\r\n              refetchQueries: [getAllBooks],\r\n            });\r\n          }}\r\n        >\r\n          <div className=\"field\" x>\r\n            {/* <label>Book name:</label> */}\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) =>\r\n                setFormData({ ...formData, bookName: e.target.value })\r\n              }\r\n              name=\"bookName\"\r\n              placeholder=\"Book name\"\r\n              value={formData.bookName}\r\n              required\r\n            />\r\n            <span className=\"focus-border\" />\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            {/* <label>Genre:</label> */}\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) =>\r\n                setFormData({ ...formData, genre: e.target.value })\r\n              }\r\n              placeholder=\"Genre\"\r\n              name=\"genre\"\r\n              value={formData.genre}\r\n              required\r\n            />\r\n            <span className=\"focus-border\" />\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            {/* <label>Author:</label> */}\r\n            <select\r\n              onChange={(e) => {\r\n                setFormData({ ...formData, authorId: e.target.value });\r\n              }}\r\n              name=\"authorId\"\r\n              required\r\n            >\r\n              <option value=\"\">Select Author</option>\r\n              {loading ? (\r\n                <option disabled>Loading...</option>\r\n              ) : (\r\n                authorData.map((author) => (\r\n                  <option key={author.id} value={author.id}>\r\n                    {author.name}\r\n                  </option>\r\n                ))\r\n              )}\r\n            </select>\r\n            <span className=\"focus-border\" />\r\n          </div>\r\n          <button type=\"submit\">\r\n            <span>+</span>\r\n          </button>\r\n        </form>\r\n        <div\r\n          className=\"toggle-section\"\r\n          onClick={() => {\r\n            bookFormRef.current?.reset();\r\n            setFormData({});\r\n            setIsBookPane(false);\r\n          }}\r\n        >\r\n          or Add an Author\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"add-book-zone\">\r\n        <h2>Add an Author</h2>\r\n        <form\r\n          ref={authorFormRef}\r\n          className=\"add-book-form\"\r\n          onSubmit={(event) => {\r\n            event.preventDefault();\r\n            addAnAuthorFuntion({\r\n              variables: {\r\n                name: formData.authorName,\r\n                age: Number(formData.authorAge),\r\n              },\r\n              refetchQueries: [getAllAuthors],\r\n            });\r\n          }}\r\n        >\r\n          <div className=\"field\" x>\r\n            <input\r\n              type=\"text\"\r\n              onChange={(e) =>\r\n                setFormData({ ...formData, authorName: e.target.value })\r\n              }\r\n              name=\"authorName\"\r\n              value={formData.authorName}\r\n              placeholder=\"Author Name\"\r\n              required\r\n            />\r\n            <span className=\"focus-border\" />\r\n          </div>\r\n\r\n          <div className=\"field\">\r\n            {/* <label>Genre:</label> */}\r\n            <input\r\n              type=\"number\"\r\n              min=\"10\"\r\n              max=\"100\"\r\n              name=\"age\"\r\n              onChange={(e) =>\r\n                setFormData({ ...formData, authorAge: e.target.value })\r\n              }\r\n              placeholder=\"Age\"\r\n              value={formData.authorAge}\r\n              required\r\n            />\r\n            <span className=\"focus-border\" />\r\n          </div>\r\n\r\n          <button type=\"submit\">\r\n            <span>+</span>\r\n          </button>\r\n        </form>\r\n        <div\r\n          className=\"toggle-section\"\r\n          onClick={() => {\r\n            authorFormRef.current?.reset();\r\n            setFormData({});\r\n            setIsBookPane(true);\r\n          }}\r\n        >\r\n          or Add a Book\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default AddAuthorOrBook;\r\n"],"sourceRoot":""}