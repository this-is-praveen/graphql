{"version":3,"sources":["queries/index.js","components/BookDetails.jsx","components/BookList.jsx"],"names":["getAllBooks","gql","getAllAuthors","addAnBook","addAnAuthor","deleteAnBook","BookDetails","props","bookData","bookId","selectedBook","find","book","id","className","name","genre","author","age","books","map","bookName","RenderList","setSelectedBook","React","useState","deleteConfirmation","setDeleteConfirmation","useMutation","deleteAnBookFuntion","onClick","e","variables","refetchQueries","setTimeout","BookList","useQuery","loading","error","data","style","position"],"mappings":"2SAEaA,EAAcC,YAAH,uNAkBXC,EAAgBD,YAAH,kFASbE,EAAYF,YAAH,sLAOTG,EAAcH,YAAH,oJAQXI,EAAeJ,YAAH,wGAQEA,YAAH,4M,kGCdTK,EArCK,SAACC,GAAU,IAMjB,MAFJC,EAAqBD,EAArBC,SAAUC,EAAWF,EAAXE,OACZC,EAAeF,EAASG,MAAK,SAACC,GAAD,OAAUA,EAAKC,KAAOJ,KACzD,OAAIA,EAEA,sBAAKK,UAAU,eAAf,UACE,+CACA,wCAAWJ,EAAaK,QACxB,sCAASL,EAAaG,MACtB,yCAAYH,EAAaM,SACzB,sDACiBN,QADjB,IACiBA,GADjB,UACiBA,EAAcO,cAD/B,aACiB,EAAsBF,KADvC,YAEGL,QAFH,IAEGA,GAFH,UAEGA,EAAcO,cAFjB,aAEG,EAAsBC,IAFzB,OAIA,sDACA,oCACGR,QADH,IACGA,GADH,UACGA,EAAcO,cADjB,aACG,EAAsBE,MAAMC,KAAI,SAACC,GAChC,OAAe,OAARA,QAAQ,IAARA,OAAA,EAAAA,EAAUN,QAASL,EAAaK,KACrC,6BAEA,oCAAKM,QAAL,IAAKA,OAAL,EAAKA,EAAUN,eAQvB,qBAAKD,UAAU,UAAf,SACE,oDC5BFQ,EAAa,SAACf,GAAW,IAAD,EACiBA,EAArCgB,uBADoB,MACF,aADE,EACQX,EAASL,EAATK,KADR,EAEwBY,IAAMC,UAAS,GAFvC,mBAErBC,EAFqB,KAEDC,EAFC,OAGEC,YAAYvB,KAAnCwB,EAHqB,oBAK5B,OACE,oBAEEC,QAAS,WACPP,EAAgBX,EAAKC,KAHzB,SAMGa,EACC,sBACEI,QAAS,SAACC,GACRF,EAAoB,CAClBG,UAAW,CACTnB,GAAID,EAAKC,IAEXoB,eAAgB,CAACjC,OAEnB2B,GAAsB,IAR1B,sCAcA,qCACGf,EAAKG,KACN,sBACED,UAAU,aACVgB,QAAS,WACPH,GAAsB,GACtBO,YAAW,WACTP,GAAsB,KACrB,MANP,mBAtBCf,EAAKC,KAgEDsB,UAzBE,WAAO,IAAD,EACmBX,IAAMC,SAAS,IADlC,mBACdf,EADc,KACAa,EADA,OAEYa,YAASpC,KAAlCqC,EAFa,EAEbA,QAASC,EAFI,EAEJA,MAAOC,EAFH,EAEGA,KACxB,GAAIF,EAAS,OAAO,gDACpB,GAAIC,EAAO,OAAO,yCAClB,IAAM9B,EAAW+B,EAAKpB,MACtB,OACE,qCACE,mBAAGN,GAAG,MAAM2B,MAAO,CAAEC,SAAU,YAA/B,oBAGA,sBAAK3B,UAAU,YAAf,UACE,sBAAKA,UAAU,WAAf,UACE,4CACA,6BACGN,EAASY,KAAI,SAACR,GAAD,OACZ,cAAC,EAAD,CAAYW,gBAAiBA,EAAiBX,KAAMA,YAI1D,cAAC,EAAD,CAAaJ,SAAUA,EAAUC,OAAQC","file":"static/js/5.3f1bca15.chunk.js","sourcesContent":["import { gql, useQuery } from \"@apollo/client\";\r\n\r\nexport const getAllBooks = gql`\r\n  {\r\n    books {\r\n      id\r\n      name\r\n      genre\r\n      author {\r\n        name\r\n        age\r\n        id\r\n        books {\r\n          name\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getAllAuthors = gql`\r\n  {\r\n    authors {\r\n      id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const addAnBook = gql`\r\n  mutation ($name: String!, $genre: String!, $authorId: ID!) {\r\n    addAnBook(name: $name, genre: $genre, authorId: $authorId) {\r\n      name\r\n    }\r\n  }\r\n`;\r\nexport const addAnAuthor = gql`\r\n  mutation ($name: String!, $age: Int!) {\r\n    addAnAuthor(name: $name, age: $age) {\r\n      name\r\n      id\r\n    }\r\n  }\r\n`;\r\nexport const deleteAnBook = gql`\r\n  mutation ($id: ID!) {\r\n    deleteAnBook(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getBookById = gql`\r\n  query ($id: ID!) {\r\n    book(id: $id) {\r\n      name\r\n      genre\r\n      author {\r\n        name\r\n        age\r\n        book {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nconst BookDetails = (props) => {\r\n  //   const { loading, error, data } = useQuery(getBookById);\r\n  //   if (loading) return <p>Calling Data...</p>;\r\n  //   if (error) return <p>Error :(</p>;\r\n  const { bookData, bookId } = props;\r\n  const selectedBook = bookData.find((book) => book.id === bookId);\r\n  if (bookId) {\r\n    return (\r\n      <div className=\"book-details\">\r\n        <h1>Selected Book</h1>\r\n        <p>Book : {selectedBook.name}</p>\r\n        <p>ID : {selectedBook.id}</p>\r\n        <p>Genre : {selectedBook.genre}</p>\r\n        <p>\r\n          Author Name : {selectedBook?.author?.name} (\r\n          {selectedBook?.author?.age})\r\n        </p>\r\n        <span>Authors other work</span>\r\n        <ul>\r\n          {selectedBook?.author?.books.map((bookName) => {\r\n            return bookName?.name === selectedBook.name ? (\r\n              <></>\r\n            ) : (\r\n              <li>{bookName?.name}</li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"no-book\">\r\n        <p>No Book Selected</p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default BookDetails;\r\n","import { useMutation, useQuery } from \"@apollo/client\";\r\nimport React from \"react\";\r\nimport { deleteAnBook, getAllBooks } from \"../queries\";\r\nimport BookDetails from \"./BookDetails\";\r\n\r\nconst RenderList = (props) => {\r\n  const { setSelectedBook = () => {}, book } = props;\r\n  const [deleteConfirmation, setDeleteConfirmation] = React.useState(false);\r\n  const [deleteAnBookFuntion] = useMutation(deleteAnBook);\r\n\r\n  return (\r\n    <li\r\n      key={book.id}\r\n      onClick={() => {\r\n        setSelectedBook(book.id);\r\n      }}\r\n    >\r\n      {deleteConfirmation ? (\r\n        <span\r\n          onClick={(e) => {\r\n            deleteAnBookFuntion({\r\n              variables: {\r\n                id: book.id,\r\n              },\r\n              refetchQueries: [getAllBooks],\r\n            });\r\n            setDeleteConfirmation(false);\r\n          }}\r\n        >\r\n          Wanna Trash ðŸ—‘\r\n        </span>\r\n      ) : (\r\n        <>\r\n          {book.name}\r\n          <span\r\n            className=\"close-icon\"\r\n            onClick={() => {\r\n              setDeleteConfirmation(true);\r\n              setTimeout(() => {\r\n                setDeleteConfirmation(false);\r\n              }, 5000);\r\n            }}\r\n          >\r\n            x\r\n          </span>\r\n        </>\r\n      )}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst BookList = () => {\r\n  const [selectedBook, setSelectedBook] = React.useState(\"\");\r\n  const { loading, error, data } = useQuery(getAllBooks);\r\n  if (loading) return <p>Calling Data...</p>;\r\n  if (error) return <p>Error :(</p>;\r\n  const bookData = data.books;\r\n  return (\r\n    <>\r\n      <p id=\"dev\" style={{ position: \"absolute\" }}>\r\n        Prawin\r\n      </p>\r\n      <div className=\"book-pane\">\r\n        <div className=\"booklist\">\r\n          <h1>Books List</h1>\r\n          <ul>\r\n            {bookData.map((book) => (\r\n              <RenderList setSelectedBook={setSelectedBook} book={book} />\r\n            ))}\r\n          </ul>\r\n        </div>\r\n        <BookDetails bookData={bookData} bookId={selectedBook} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default BookList;\r\n"],"sourceRoot":""}